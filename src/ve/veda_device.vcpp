#include "veda_device_internal.h"
#include <mutex>
#include <thread>

#define LOCK() std::lock_guard<std::mutex> __lock(veda_mutex)

static std::unordered_map<int, VEDAdeviceptrInfo> veda_ptrs;
static std::mutex veda_mutex;

extern "C" {
//------------------------------------------------------------------------------
#include "../veda_error.inc.cpp"

//------------------------------------------------------------------------------
VEDAresult vedaMemAllocPtr(void** ptr, VEDAdeviceptr vptr, const size_t size) {
	LOCK();
	assert(size);
	assert(vptr);

	auto idx = VEDA_GET_IDX(vptr);
	if(idx == 0)
		return VEDA_ERROR_UNKNOWN_VPTR;
	if(VEDA_GET_OFFSET(vptr))
		return VEDA_ERROR_OFFSETTED_VPTR_NOT_ALLOWED;
	*ptr = malloc(size);
	if(*ptr == 0)		
		return VEDA_ERROR_OUT_OF_MEMORY;
	if(!veda_ptrs.emplace(MAP_EMPLACE(idx, *ptr, size)).second)
		return VEDA_ERROR_VPTR_ALREADY_ALLOCATED;
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemAlloc(VEDAdeviceptr vptr, const size_t size) {
	void* ptr;
	return vedaMemAllocPtr(&ptr, vptr, size);
}

//------------------------------------------------------------------------------
VEDAresult vedaMemFree(VEDAdeviceptr vptr) {
	LOCK();
	if(VEDA_GET_OFFSET(vptr))
		return VEDA_ERROR_OFFSETTED_VPTR_NOT_ALLOWED;
	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		auto ptr = it->second.ptr;
		if(!ptr)
			return VEDA_ERROR_UNKNOWN_PPTR;
		
		free(ptr);
		veda_ptrs.erase(it);
		return VEDA_SUCCESS;
	}

	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemPtr(void** ptr, VEDAdeviceptr vptr) {
	LOCK();
	*ptr = 0;

	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		*ptr = ((char*)it->second.ptr) + VEDA_GET_OFFSET(vptr);
		return VEDA_SUCCESS;
	}
	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemPtrSize(void** ptr, size_t* size, VEDAdeviceptr vptr) {
	LOCK();
	*ptr = 0;
	*size = 0;

	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		*ptr = ((char*)it->second.ptr) + VEDA_GET_OFFSET(vptr);
		*size = it->second.size;
		return VEDA_SUCCESS;
	}
	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemSize(size_t* size, VEDAdeviceptr vptr) {
	LOCK();

	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		*size = it->second.size;
		return VEDA_SUCCESS;
	}
	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemSwapPtrSize(VEDAdeviceptr A, VEDAdeviceptrInfo* Ainfo, VEDAdeviceptr B, VEDAdeviceptrInfo* Binfo) {
	LOCK();

	bool deleteA = false, deleteB = false;

	auto Aidx = VEDA_GET_IDX(A);
	auto Ait = veda_ptrs.find(Aidx);
	if(Ait == veda_ptrs.end()) {
		Ait = std::get<0>(veda_ptrs.emplace(MAP_EMPLACE(Aidx)));
		deleteB = true;
	}

	auto Bidx = VEDA_GET_IDX(B);
	auto Bit = veda_ptrs.find(Bidx);
	if(Bit == veda_ptrs.end()) {
		Bit = std::get<0>(veda_ptrs.emplace(MAP_EMPLACE(Bidx)));
		deleteA = true;
	}

	std::swap(Ait->second, Bit->second);

	if(Ainfo) 	*Ainfo = Ait->second;
	if(Binfo) 	*Binfo = Bit->second;

	if(deleteA)	veda_ptrs.erase(Ait);
	if(deleteB)	veda_ptrs.erase(Bit);

	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemSwap(VEDAdeviceptr A, VEDAdeviceptr B) {
	return vedaMemSwapPtrSize(A, 0, B, 0);
}

//------------------------------------------------------------------------------
}
