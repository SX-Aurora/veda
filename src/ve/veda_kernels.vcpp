#include "veda_device_internal.h"

//------------------------------------------------------------------------------
template<typename T>
static inline veda_memset2d(VEDAdeviceptr vdst_, const size_t pitch, const T value, const size_t _w, const size_t _h) {
	VEDAptr<T> vdst(vdst_);
	auto res = vdst.ptrSize();
	size_t cnt = _h * pitch + _w;
	if((vdst.offset() + cnt * sizeof(T)) > res.size)
		return VEDA_ERROR_OUT_OF_BOUNDS;
	
	veda_omp(_h, [&](const size_t min, const size_t max) {
		#pragma _NEC novector
		for(size_t h = min; h < max; h++) {
			auto ptr = &res.ptr[h * pitch];
			for(size_t w = 0; w < _w; w++)
				ptr[w] = value;
		}
	});
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
template<typename T>
static inline veda_memset(VEDAdeviceptr vdst_, const T value, const size_t cnt) {
	VEDAptr<T> vdst(vdst_);
	auto res = vdst.ptrSize();
	if((vdst.offset() + cnt * sizeof(T)) > res.size)
		return VEDA_ERROR_OUT_OF_BOUNDS;

	veda_omp_simd(cnt, [&](const size_t cmin, const size_t cmax) {
		auto ptr = res.ptr + cmin;
		auto max = cmax - cmin;
		for(size_t i = 0; i < max; i++)
			ptr[i] = value;
	});
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
extern "C" {
//------------------------------------------------------------------------------
VEDAresult veda_memcpy_d2d(VEDAdeviceptr vdst_, VEDAdeviceptr vsrc_, const size_t size) {
	VEDAptr<> vdst(vdst_);
	VEDAptr<> vsrc(vsrc_);
	auto rdst = vdst.ptrSize();
	auto rsrc = vsrc.ptrSize();
	if((vdst.offset() + size) > rdst.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	if((vsrc.offset() + size) > rsrc.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	// TODO: OMP
	memcpy(rdst.ptr, rsrc.ptr, size);
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u8 (VEDAdeviceptr vdst, const uint8_t  value, const size_t cnt)	{	veda_memset(vdst, value, cnt);	}
VEDAresult veda_memset_u16(VEDAdeviceptr vdst, const uint16_t value, const size_t cnt)	{	veda_memset(vdst, value, cnt);	}
VEDAresult veda_memset_u32(VEDAdeviceptr vdst, const uint32_t value, const size_t cnt)	{	veda_memset(vdst, value, cnt);	}
VEDAresult veda_memset_u64(VEDAdeviceptr vdst, const uint64_t value, const size_t cnt)	{	veda_memset(vdst, value, cnt);	}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u8_2d (VEDAdeviceptr vdst, const size_t pitch, const uint8_t  value, const size_t _w, const size_t _h)	{	veda_memset2d(vdst, pitch, value, _w, _h);	}
VEDAresult veda_memset_u16_2d(VEDAdeviceptr vdst, const size_t pitch, const uint16_t value, const size_t _w, const size_t _h)	{	veda_memset2d(vdst, pitch, value, _w, _h);	}
VEDAresult veda_memset_u32_2d(VEDAdeviceptr vdst, const size_t pitch, const uint32_t value, const size_t _w, const size_t _h)	{	veda_memset2d(vdst, pitch, value, _w, _h);	}
VEDAresult veda_memset_u64_2d(VEDAdeviceptr vdst, const size_t pitch, const uint64_t value, const size_t _w, const size_t _h)	{	veda_memset2d(vdst, pitch, value, _w, _h);	}

//------------------------------------------------------------------------------
VEDAresult veda_mem_alloc(void** ptr, VEDAdeviceptr vptr, const size_t size) {
	return vedaMemAllocPtr(ptr, vptr, size);
}

//------------------------------------------------------------------------------
VEDAresult veda_mem_free(VEDAdeviceptr vptr) {
	return vedaMemFree(vptr);
}

//------------------------------------------------------------------------------
VEDAresult veda_mem_ptr(void** ptr, size_t* size, VEDAdeviceptr vptr) {
	return vedaMemPtrSize(ptr, size, vptr);
}

//------------------------------------------------------------------------------
}
