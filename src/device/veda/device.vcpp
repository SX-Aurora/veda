#include "internal.h"
#include <mutex>
#include <thread>
#include <tungl/c.h>
#include <tungl/api.h>

#define LOCK() std::lock_guard<std::mutex> __lock__(veda_mutex)

static std::unordered_map<VEDAidx, VEDAdeviceptrInfo>	veda_ptrs;
static std::mutex					veda_mutex;

//------------------------------------------------------------------------------
#include <veda/veda_error.inc.cpp>

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------
VEDAresult vedaAssignPtr(VEDAdeviceptr vptr, void* ptr, const size_t size) {
	if(VEDA_GET_OFFSET(vptr))
		return VEDA_ERROR_OFFSETTED_VPTR_NOT_ALLOWED;
	assert(size);
	assert(vptr);
	assert(ptr);

	auto idx = VEDA_GET_IDX(vptr);
	if(idx == 0)
		return VEDA_ERROR_UNKNOWN_VPTR;
	
	LOCK();
	auto pair = veda_ptrs.emplace(MAP_EMPLACE(idx, ptr, size));

	if(pair.second)
		return VEDA_SUCCESS;

	auto& info = pair.first->second;
	return info.size == size ? VEDA_ERROR_VPTR_ALREADY_ALLOCATED : VEDA_ERROR_INVALID_VALUE;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemRemove(VEDAdeviceptr vptr) {
	if(VEDA_GET_OFFSET(vptr))
		return VEDA_ERROR_OFFSETTED_VPTR_NOT_ALLOWED;

	LOCK();
	auto idx = VEDA_GET_IDX(vptr);
	if(idx == 0)
		return VEDA_ERROR_UNKNOWN_VPTR;
	
	auto it = veda_ptrs.find(idx);
	if(it == veda_ptrs.end())
		return VEDA_ERROR_UNKNOWN_VPTR;

	veda_ptrs.erase(it);
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
VEDAresult vedaMemInfo(const size_t cnt, const VEDAdeviceptr* vptrs, VEDAdeviceptrInfo* info) {
	LOCK();
	#pragma omp parallel for
	for(size_t i = 0; i < cnt; i++) {
		auto it = veda_ptrs.find(VEDA_GET_IDX(vptrs[i]));
		auto& inf = info[i];
		if(it != veda_ptrs.end())	inf = it->second;
		else				inf = {0, 0};
	}
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemFree(VEDAdeviceptr vptr) {
	if(vptr == 0)
		return VEDA_ERROR_INVALID_ARGS;

	if(VEDA_GET_OFFSET(vptr))
		return VEDA_ERROR_OFFSETTED_VPTR_NOT_ALLOWED;

	auto idx = VEDA_GET_IDX(vptr);
	if(idx == 0)
		return VEDA_ERROR_UNKNOWN_VPTR;

	LOCK();
	auto it = veda_ptrs.find(idx);
	if(it == veda_ptrs.end())
		return VEDA_ERROR_UNKNOWN_VPTR;

	free(it->second.ptr);

	veda_ptrs.erase(it);
	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemAllocPtr(void** ptr, VEDAdeviceptr vptr, const size_t size) {
	if(ptr == 0 || size == 0 || vptr == 0)
		return VEDA_ERROR_INVALID_ARGS;

	*ptr = 0;

	if(VEDA_GET_OFFSET(vptr))
		return VEDA_ERROR_OFFSETTED_VPTR_NOT_ALLOWED;
	
	auto idx = VEDA_GET_IDX(vptr);
	if(idx == 0)
		return VEDA_ERROR_UNKNOWN_VPTR;
	
	LOCK();
	auto pair	= veda_ptrs.emplace(MAP_EMPLACE(idx, (void*)0, size));
	auto& info	= pair.first->second;
	if(pair.second) {
		*ptr = malloc(size);
		if(*ptr == 0)
			return VEDA_ERROR_OUT_OF_MEMORY;
		info.ptr = *ptr;
	} else {
		if(info.size == size) {
			*ptr = info.ptr;
			return VEDA_ERROR_VPTR_ALREADY_ALLOCATED;
		}
		return VEDA_ERROR_INVALID_VALUE;
	}

	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemAlloc(VEDAdeviceptr vptr, const size_t size) {
	void* ptr = 0;
	return vedaMemAllocPtr(&ptr, vptr, size);
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemPtr(void** ptr, VEDAdeviceptr vptr) {
	LOCK();
	*ptr = 0;

	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		*ptr = ((char*)it->second.ptr) + VEDA_GET_OFFSET(vptr);
		return VEDA_SUCCESS;
	}

	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemPtrSize(void** ptr, size_t* size, VEDAdeviceptr vptr) {
	LOCK();
	*ptr = 0;
	*size = 0;

	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		*ptr = ((char*)it->second.ptr) + VEDA_GET_OFFSET(vptr);
		*size = it->second.size;
		return VEDA_SUCCESS;
	}

	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemSize(size_t* size, VEDAdeviceptr vptr) {
	LOCK();

	auto it = veda_ptrs.find(VEDA_GET_IDX(vptr));
	if(it != veda_ptrs.end()) {
		*size = it->second.size;
		return VEDA_SUCCESS;
	}
	return VEDA_ERROR_UNKNOWN_VPTR;
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaMemSwap(VEDAdeviceptr A, VEDAdeviceptr B) {
	LOCK();

	auto Aidx = VEDA_GET_IDX(A), Bidx = VEDA_GET_IDX(B);
	auto Ait = veda_ptrs.find(Aidx);
	auto Bit = veda_ptrs.find(Bidx);
	auto end = veda_ptrs.end();

	if(Ait != end && Bit != end) {
		std::swap(Ait->second, Bit->second);
	} else if(Ait != end) {
		veda_ptrs.emplace(MAP_EMPLACE(Bidx, Ait->second));
		veda_ptrs.erase(Ait);
	} else if(Bit != end) {
		veda_ptrs.emplace(MAP_EMPLACE(Aidx, Bit->second));
		veda_ptrs.erase(Bit);
	} else {
		// nothing to do as both have not been allocated
	}

	return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
inline int veo_is_ve_addr(const void *addr) {
	return IS_VE(addr) ? 1 : 0;
}

//------------------------------------------------------------------------------
inline void* veo_get_hmem_addr(void *addr) {
	if(veo_is_ve_addr(addr))
		return (void *)(~VEIDENT_MBITS & (uint64_t)addr);
	else
		return addr;
}

//------------------------------------------------------------------------------
__global__ VEDAresult vedaHMemPtr(void** ptr, VEDAhmemptr hptr) {
        *ptr = veo_get_hmem_addr(hptr);
        return VEDA_SUCCESS;
}

//------------------------------------------------------------------------------

