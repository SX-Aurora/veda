#include "internal.h"
#include <stdio.h>
//------------------------------------------------------------------------------
extern "C" {
//------------------------------------------------------------------------------
VEDAresult veda_memcpy_d2d(VEDAdeviceptr vdst_, VEDAdeviceptr vsrc_, const size_t size) {
	VEDAptr<char> vdst(vdst_);
	VEDAptr<char> vsrc(vsrc_);
	auto rdst = vdst.ptrSize();
	auto rsrc = vsrc.ptrSize();
	if((vdst.offset() + size) > rdst.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	if((vsrc.offset() + size) > rsrc.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	return vedaMemcpy(rdst.ptr, rsrc.ptr, size);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u8(VEDAdeviceptr vdst, const uint8_t  value, const size_t cnt) {
	VEDAptr<> ptr(vdst);
	auto ps = ptr.ptrSize();
	if((ptr.offset() + cnt * sizeof(uint8_t)) > ps.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	return veda_raw_memset_u8(ps.ptr, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u16(VEDAdeviceptr vdst, const uint16_t value, const size_t cnt) {
	VEDAptr<> ptr(vdst);
	auto ps = ptr.ptrSize();
	if((ptr.offset() + cnt * sizeof(uint16_t)) > ps.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	return veda_raw_memset_u16(ps.ptr, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u32(VEDAdeviceptr vdst, const uint32_t value, const size_t cnt) {
	VEDAptr<> ptr(vdst);
	auto ps = ptr.ptrSize();
	if((ptr.offset() + cnt * sizeof(uint32_t)) > ps.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	return veda_raw_memset_u32(ps.ptr, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u64(VEDAdeviceptr vdst, const uint64_t value, const size_t cnt) {
	VEDAptr<> ptr(vdst);
	auto ps = ptr.ptrSize();
	if((ptr.offset() + cnt * sizeof(uint64_t)) > ps.size)	return VEDA_ERROR_OUT_OF_BOUNDS;
	return veda_raw_memset_u64(ps.ptr, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u128(VEDAdeviceptr vdst, const uint64_t x, const uint64_t y, const size_t cnt) {
	VEDAptr<> ptr(vdst);
	auto ps = ptr.ptrSize();
	if((ptr.offset() + cnt * sizeof(uint64_t) * 2) > ps.size)return VEDA_ERROR_OUT_OF_BOUNDS;
	return veda_raw_memset_u128(ps.ptr, x, y, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u8_2d(VEDAdeviceptr vdst, const size_t pitch, const uint8_t value, const size_t w, const size_t h) {
	VEDAptr<> ptr(vdst);
	return veda_raw_memset_u8_2d(ptr.ptr(), pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u16_2d(VEDAdeviceptr vdst, const size_t pitch, const uint16_t value, const size_t w, const size_t h) {
	VEDAptr<> ptr(vdst);
	return veda_raw_memset_u16_2d(ptr.ptr(), pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u32_2d(VEDAdeviceptr vdst, const size_t pitch, const uint32_t value, const size_t w, const size_t h) {
	VEDAptr<> ptr(vdst);
	return veda_raw_memset_u32_2d(ptr.ptr(), pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u64_2d(VEDAdeviceptr vdst, const size_t pitch, const uint64_t value, const size_t w, const size_t h) {
	VEDAptr<> ptr(vdst);
	return veda_raw_memset_u64_2d(ptr.ptr(), pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_memset_u128_2d(VEDAdeviceptr vdst, const size_t pitch, const uint64_t x, const uint64_t y, const size_t w, const size_t h) {
	VEDAptr<> ptr(vdst);
	return veda_raw_memset_u128_2d(ptr.ptr(), pitch, x, y, w, h);
}

//------------------------------------------------------------------------------
void* veda_mem_assign(VEDAdeviceptr vptr, const size_t size) {
	void* ptr = 0;
        veo_prev_req_result(0, (uint64_t*)&ptr);
	auto res = vedaAssignPtr(vptr, ptr, size);
	return res != VEDA_SUCCESS ? 0 : ptr;
}

//------------------------------------------------------------------------------
VEDAresult veda_mem_remove(VEDAdeviceptr vptr) {
	return vedaRemovePtr(vptr);
}

//------------------------------------------------------------------------------
VEDAresult veda_mem_free(VEDAdeviceptr vptr) {
	auto res = vedaMemFree(vptr);
	// We ignore UNKNOWN_VPTR. This just means that it has been allocated
	// on the host, but never on device.
	return res != VEDA_ERROR_UNKNOWN_VPTR ? res : VEDA_SUCCESS;
}

//------------------------------------------------------------------------------
VEDAresult veda_mem_swap(VEDAdeviceptr A, VEDAdeviceptr B) {
	return vedaMemSwap(A, B);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memcpy_d2d(void* dst, void* src, const size_t size) {
	return vedaMemcpy(dst, src, size);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u8(void* dst, const uint8_t  value, const size_t cnt) {
	return vedaMemsetD8(dst, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u8_2d(void* dst, const size_t pitch, const uint8_t value, const size_t w, const size_t h) {
	return vedaMemsetD2D8(dst, pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u16(void* dst, const uint16_t value, const size_t cnt) {
	return vedaMemsetD16(dst, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u16_2d(void* dst, const size_t pitch, const uint16_t value, const size_t w, const size_t h) {
	return vedaMemsetD2D16(dst, pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u32(void* dst, const uint32_t value, const size_t cnt) {
	return vedaMemsetD32(dst, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u32_2d(void* dst, const size_t pitch, const uint32_t value, const size_t w, const size_t h) {
	return vedaMemsetD2D32(dst, pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u64(void* dst, const uint64_t value, const size_t cnt) {
	return vedaMemsetD64(dst, value, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u64_2d(void* dst, const size_t pitch, const uint64_t value, const size_t w, const size_t h) {
	return vedaMemsetD2D64(dst, pitch, value, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u128(void* dst, const uint64_t x, const uint64_t y, const size_t cnt) {
	return vedaMemsetD128(dst, x, y, cnt);
}

//------------------------------------------------------------------------------
VEDAresult veda_raw_memset_u128_2d(void* dst, const size_t pitch, const uint64_t x, const uint64_t y, const size_t w, const size_t h) {
	return vedaMemsetD2D128(dst, pitch, x, y, w, h);
}

//------------------------------------------------------------------------------
VEDAresult veda_mem_info(const size_t cnt, const VEDAdeviceptr* vptrs, VEDAdeviceptrInfoS* info) {
	return vedaMemInfo(cnt, vptrs, info);
}

//------------------------------------------------------------------------------
}
