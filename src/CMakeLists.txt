CMAKE_MINIMUM_REQUIRED(VERSION 3.11)

SET(VEDA_VERSION_API	"0")
SET(VEDA_VERSION_STABLE	"1")
SET(VEDA_VERSION_MAJOR	"1")
SET(VEDA_VERSION_MINOR	"0")
SET(VEDA_VERSION_RC	"")
SET(VEDA_VERSION	"${VEDA_VERSION_STABLE}.${VEDA_VERSION_MAJOR}.${VEDA_VERSION_MINOR}${VEDA_VERSION_RC}")
SET(VEDA_VERSION_CMAKE	"${VEDA_VERSION_STABLE}.${VEDA_VERSION_MAJOR}.${VEDA_VERSION_MINOR}")
SET(VEDA_VERSION_RPM	"${VEDA_VERSION_STABLE}.${VEDA_VERSION_MAJOR}")

PROJECT(VEDA VERSION "${VEDA_VERSION_CMAKE}" LANGUAGES C CXX)

IF(NOT CMAKE_BUILD_TYPE)
	SET(CMAKE_BUILD_TYPE RELEASE CACHE STRING "" FORCE)
ENDIF()

## CMake Stuff -----------------------------------------------------------------
IF(NOT ${CMAKE_HOST_SYSTEM_NAME} MATCHES "Linux")
	MESSAGE(FATAL "Not supported operating system. Only Linux supported!")
ENDIF()

SET(CMAKE_INSTALL_RPATH "\$ORIGIN")
SET(CMAKE_MODULE_PATH "${CMAKE_CURRENT_LIST_DIR}/cmake")

OPTION(BUILD_SHARED "Builds VEDA as shared library." ON)
OPTION(BUILD_VEOS_RELEASE "Builds VEDA as VEOS release." OFF)

IF(${BUILD_SHARED})
	SET(BUILD_TYPE SHARED)
ELSE()
	SET(BUILD_TYPE STATIC)
ENDIF()

## Pack VEDA -------------------------------------------------------------------
SET(VEDA_SYMLINK ${CMAKE_CURRENT_BINARY_DIR}/veda)

## Set Build Dependent Properties ----------------------------------------------
IF(BUILD_VEOS_RELEASE)
	SET(VEDA_INSTALL_DEFAULT	"/opt/nec/ve")
	SET(VEDA_INSTALL_PATH		"share/veoffload-veda")
	SET(CPACK_PACKAGE_NAME		"veoffload-veda")
	SET(AVEO_PATH			"/opt/nec/ve/veos")
	SET(AVEO_INCLUDE		"${AVEO_PATH}/include")
	SET(AVEO_LIBRARY		"${AVEO_PATH}/lib64/libveo.so.1.0.0")
	SET(CPACK_RPM_EXCLUDE_FROM_AUTO_FILELIST_ADDITION /opt/nec/ve/bin /opt/nec/ve/lib /opt/nec/ve/share)
	ADD_DEFINITIONS(-DBUILD_VEOS_RELEASE=1)
ELSE()
	SET(VEDA_INSTALL_DEFAULT	"/usr/local/ve")
	SET(VEDA_INSTALL_PATH		"veda-${VEDA_VERSION}")
	SET(CPACK_PACKAGE_NAME		"veda-${VEDA_VERSION_RPM}")

	## Download/Build AVEO -------------------------------------------------
	SET(AVEO_REPO		"https://github.com/SX-Aurora/aveo")
	SET(AVEO_PATH		${CMAKE_CURRENT_BINARY_DIR}/aveo)
	SET(AVEO_GIT_TAG	"master")
	SET(AVEO_NFORT		"/opt/nec/ve/bin/nfort" CACHE STRING "NFORT Version used to compile AVEO")

	CONFIGURE_FILE("${CMAKE_CURRENT_LIST_DIR}/aveo.patch.in" "${CMAKE_CURRENT_BINARY_DIR}/aveo.patch" @ONLY)

	INCLUDE(ExternalProject)
	ExternalProject_Add(aveo
		BINARY_DIR		${AVEO_PATH}/src
		BUILD_COMMAND		make
		CONFIGURE_COMMAND	""
		GIT_REPOSITORY		${AVEO_REPO}
		GIT_SHALLOW		FALSE
		GIT_TAG			${AVEO_GIT_TAG}
		INSTALL_COMMAND		make install
		INSTALL_DIR		""
		PATCH_COMMAND		git apply ${CMAKE_CURRENT_BINARY_DIR}/aveo.patch
		PREFIX			${AVEO_PATH}
		SOURCE_DIR		${AVEO_PATH}/src
		STAMP_DIR		${AVEO_PATH}/stamp
		TMP_DIR			${AVEO_PATH}/tmp
		UPDATE_DISCONNECTED 	TRUE
	)

	
	SET(AVEO_INCLUDE	"${AVEO_PATH}/src/src/")
	SET(AVEO_LIBRARY	"${AVEO_PATH}/src/install/lib64/libveo.so.1.0.0")
	SET(AVEO_SYMLINK	"${CMAKE_CURRENT_BINARY_DIR}/libveo.so")
	FILE(WRITE ${AVEO_SYMLINK} "INPUT(libveo.so.1)")
	SET(AVEO_URPC_LIBRARY	"")
	SET(AVEO_AVEORUN	"${AVEO_PATH}/src/install/libexec/aveorun")
	SET(AVEO_AVEORUN_FTRACE	"${AVEO_PATH}/src/install/libexec/aveorun-ftrace")

	INSTALL(FILES ${AVEO_LIBRARY} DESTINATION ${VEDA_INSTALL_PATH}/lib64 RENAME libveo.so.1)
	INSTALL(FILES ${AVEO_SYMLINK} ${AVEO_URPC_LIBRARY} DESTINATION ${VEDA_INSTALL_PATH}/lib64)
	INSTALL(FILES ${AVEO_AVEORUN} ${AVEO_AVEORUN_FTRACE} PERMISSIONS OWNER_READ OWNER_WRITE OWNER_EXECUTE GROUP_READ GROUP_EXECUTE WORLD_READ WORLD_EXECUTE DESTINATION ${VEDA_INSTALL_PATH}/libexec)

	SET(AVEO_LIBRARIES ${AVEO_LIBRARY} ${AVEO_URPC_LIBRARY})
ENDIF()

## Install SymLink -------------------------------------------------------------
IF(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
	SET(CMAKE_INSTALL_PREFIX ${VEDA_INSTALL_DEFAULT} CACHE PATH "CMAKE install path" FORCE)
ENDIF()
EXECUTE_PROCESS(COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_INSTALL_PREFIX}/${VEDA_INSTALL_PATH} ${VEDA_SYMLINK})

IF(BUILD_VEOS_RELEASE)
	INSTALL(DIRECTORY ${VEDA_SYMLINK} DESTINATION share)
ELSE()
	INSTALL(DIRECTORY ${VEDA_SYMLINK} DESTINATION .)
ENDIF()

## Configure CPack -------------------------------------------------------------
SET(CPACK_PACKAGE_VERSION ${VEDA_VERSION})
SET(CPACK_GENERATOR "RPM")
SET(CPACK_PACKAGE_RELEASE 1)
SET(CPACK_PACKAGE_CONTACT "Nicolas Weber")
SET(CPACK_PACKAGE_VENDOR "NEC Laboratories Europe")
SET(CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX})
SET(CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}-${CMAKE_SYSTEM_PROCESSOR}") # ${CPACK_PACKAGE_RELEASE}.
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "VEDA Hybrid Programming API")
SET(CPACK_PACKAGE_HOMEPAGE_URL "https://github.com/sx-aurora/veda")
INCLUDE(CPack)
ADD_CUSTOM_TARGET(pack COMMAND cpack3 WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR})

## Build VEDA ------------------------------------------------------------------
CONFIGURE_FILE(${CMAKE_CURRENT_LIST_DIR}/veda_version.cpp.in ${CMAKE_CURRENT_BINARY_DIR}/veda_version.cpp)
CONFIGURE_FILE(${CMAKE_CURRENT_LIST_DIR}/veda_version.h.in ${CMAKE_CURRENT_BINARY_DIR}/veda_version.h)

FIND_LIBRARY(LIBUDEV_LIBRARY "libudev.so")

INCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR})
INCLUDE_DIRECTORIES(${CMAKE_CURRENT_BINARY_DIR})
INCLUDE_DIRECTORIES(${AVEO_INCLUDE})
SET(VEDA_SRC
	${CMAKE_CURRENT_BINARY_DIR}/veda_version.cpp
	${CMAKE_CURRENT_BINARY_DIR}/veda_version.h
	${CMAKE_CURRENT_LIST_DIR}/veda.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_args.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_context.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_device.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_mem.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_module.cpp
	${CMAKE_CURRENT_LIST_DIR}/veda_stream.cpp
)
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/veda/CMakeLists.txt)

ADD_LIBRARY(veda ${BUILD_TYPE} ${VEDA_SRC})
TARGET_LINK_LIBRARIES(veda ${AVEO_LIBRARIES} ${LIBUDEV_LIBRARY} dl)
TARGET_COMPILE_OPTIONS(veda PRIVATE
	-Wuninitialized
	-Wunknown-pragmas
	-Wunused-function
	-Wunused-label
	-Wunused-value
	-Wunused-variable
	-Wno-return-local-addr)
SET_TARGET_PROPERTIES(veda
	PROPERTIES
	CXX_STANDARD		11
	CXX_STANDARD_REQUIRED	YES
	CXX_EXTENSIONS		NO
	SUFFIX			".so.${VEDA_VERSION_API}"
	LINK_FLAGS		"-Wl,-lpthread -Wl,--no-as-needed -Wl,-z,defs -Wl,--version-script=${CMAKE_CURRENT_LIST_DIR}/libveda.map"
)

IF(NOT BUILD_VEOS_RELEASE)
	ADD_DEPENDENCIES(veda aveo)
ENDIF()

SET(VEDA_SYMLINK "${CMAKE_CURRENT_BINARY_DIR}/libveda.so")
FILE(WRITE ${VEDA_SYMLINK} "INPUT(libveda.so.${VEDA_VERSION_API})")

## Build VERA ------------------------------------------------------------------
SET(VERA_SRC
	${CMAKE_CURRENT_LIST_DIR}/vera.cpp
)
ADD_LIBRARY(vera ${BUILD_TYPE} ${VERA_SRC})
TARGET_LINK_LIBRARIES(vera veda)
TARGET_COMPILE_OPTIONS(vera PRIVATE
	-Wuninitialized
	-Wunknown-pragmas
	-Wunused-function
	-Wunused-label
	-Wunused-value
	-Wunused-variable
	-Wno-return-local-addr)
SET_TARGET_PROPERTIES(vera
	PROPERTIES
	CXX_STANDARD		11
	CXX_STANDARD_REQUIRED	YES
	CXX_EXTENSIONS		NO
	SUFFIX			".so.${VEDA_VERSION_API}"
	LINK_FLAGS		"-Wl,--no-as-needed -Wl,-z,defs -Wl,--version-script=${CMAKE_CURRENT_LIST_DIR}/libvera.map"
)

SET(VERA_SYMLINK "${CMAKE_CURRENT_BINARY_DIR}/libvera.so")
FILE(WRITE ${VERA_SYMLINK} "INPUT(libvera.so.${VEDA_VERSION_API})")

## Build VEDA-SMI --------------------------------------------------------------
ADD_EXECUTABLE(veda-smi ${CMAKE_CURRENT_LIST_DIR}/veda-smi.cpp)
TARGET_LINK_LIBRARIES(veda-smi veda)
SET_TARGET_PROPERTIES(veda-smi PROPERTIES LINK_FLAGS "-Wl,-rpath,$ORIGIN/../lib64")

## Build VE code ---------------------------------------------------------------
ADD_SUBDIRECTORY(ve)

## Install Files ---------------------------------------------------------------
IF(BUILD_VEOS_RELEASE)
	SET(VERA_SYMLINK "${CMAKE_CURRENT_BINARY_DIR}/libvera.so")
	FILE(WRITE ${VERA_SYMLINK} "INPUT(libvera.so.${VEDA_VERSION_API})")
	SET(VEDA_VSO "${CMAKE_CURRENT_BINARY_DIR}/ve/libveda.vso")
	SET(LN_COMMAND "/usr/bin/ln")
	INSTALL(FILES
		${CMAKE_CURRENT_BINARY_DIR}/veda_version.h
		${CMAKE_CURRENT_LIST_DIR}/veda.h
		${CMAKE_CURRENT_LIST_DIR}/veda_enums.h
		${CMAKE_CURRENT_LIST_DIR}/veda_macros.h
		${CMAKE_CURRENT_LIST_DIR}/veda_types.h
		${CMAKE_CURRENT_LIST_DIR}/veda_ptr.h
		${CMAKE_CURRENT_LIST_DIR}/vera.h
		${CMAKE_CURRENT_LIST_DIR}/vera_enums.h
		${CMAKE_CURRENT_LIST_DIR}/vera_types.h
	DESTINATION ${CMAKE_INSTALL_PREFIX}/${VEDA_INSTALL_PATH}/include)
	INSTALL(TARGETS veda vera LIBRARY DESTINATION ${CMAKE_INSTALL_PREFIX}/veos/lib64)
	INSTALL(TARGETS veda-smi RUNTIME DESTINATION ${CMAKE_INSTALL_PREFIX}/veos/bin)
	INSTALL(FILES ${VEDA_SYMLINK} ${VERA_SYMLINK} ${VEDA_VSO} DESTINATION ${CMAKE_INSTALL_PREFIX}/veos/lib64 PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_READ)
	INSTALL(FILES ${CMAKE_CURRENT_LIST_DIR}/../LICENSE DESTINATION ${CMAKE_INSTALL_PREFIX}/${VEDA_INSTALL_PATH})
	INSTALL(FILES ${VEDA_VSO} DESTINATION ${CMAKE_INSTALL_PREFIX}/lib PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ GROUP_EXECUTE GROUP_READ WORLD_READ)
	SET(VEDA_SMI_SYMLINK "${CMAKE_INSTALL_PREFIX}/bin/veda-smi")
	INSTALL(CODE "EXECUTE_PROCESS(COMMAND ${LN_COMMAND} -s ${CMAKE_INSTALL_PREFIX}/veos/bin/veda-smi ${CMAKE_CURRENT_LIST_DIR}/veda-smi)")
	INSTALL(FILES ${CMAKE_CURRENT_LIST_DIR}/veda-smi DESTINATION ${CMAKE_INSTALL_PREFIX}/bin)
ELSE()
	INSTALL(FILES 
		${CMAKE_CURRENT_BINARY_DIR}/veda_version.h
		${CMAKE_CURRENT_LIST_DIR}/veda.h
		${CMAKE_CURRENT_LIST_DIR}/veda_enums.h
		${CMAKE_CURRENT_LIST_DIR}/veda_macros.h
		${CMAKE_CURRENT_LIST_DIR}/veda_types.h
		${CMAKE_CURRENT_LIST_DIR}/veda_ptr.h
		${CMAKE_CURRENT_LIST_DIR}/vera.h
		${CMAKE_CURRENT_LIST_DIR}/vera_enums.h
		${CMAKE_CURRENT_LIST_DIR}/vera_types.h
	DESTINATION ${VEDA_INSTALL_PATH}/include)
	INSTALL(TARGETS veda vera LIBRARY DESTINATION ${VEDA_INSTALL_PATH}/lib64)
	INSTALL(TARGETS veda-smi RUNTIME DESTINATION ${VEDA_INSTALL_PATH}/bin)
	INSTALL(FILES ${VEDA_SYMLINK} ${VERA_SYMLINK} DESTINATION ${VEDA_INSTALL_PATH}/lib64)
	INSTALL(FILES ${CMAKE_CURRENT_LIST_DIR}/../LICENSE DESTINATION ${VEDA_INSTALL_PATH})
	INSTALL(FILES ${AVEO_PATH}/src/COPYING DESTINATION ${VEDA_INSTALL_PATH} RENAME AVEO_LICENSE)
	INSTALL(FILES ${AVEO_PATH}/src/COPYING DESTINATION ${VEDA_INSTALL_PATH} RENAME AVEO_LICENSE)
	INSTALL(FILES ${AVEO_PATH}/src/prereqs/ve-urpc/LICENSE DESTINATION ${VEDA_INSTALL_PATH} RENAME VEURPC_LICENSE)
ENDIF()

## CMake Find Script -----------------------------------------------------------
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/cmake/CMakeLists.txt)

## Tests -----------------------------------------------------------------------
OPTION(WITH_TESTS "Enable tests" OFF)
IF(WITH_TESTS)
	INCLUDE_DIRECTORIES(${CMAKE_CURRENT_LIST_DIR}/ve)
	ADD_SUBDIRECTORY(tests)
ENDIF()
