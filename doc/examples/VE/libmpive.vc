#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <stdint.h>

uint64_t
init( int *p, int v, int n )
{
    printf( "VE init : %d %d %p\n", v, n, p );
    fflush( stdout );
    int *ve;
    vedaHMemPtr(&ve, p);

    int i;
    for ( i = 0; i < n; i++ ) ve[i] = v;

    return (uint64_t)ve;
}

uint64_t
check( int *p, int v, int n )
{
    printf( "VE init : %d %d %p\n", v, n, p );
    fflush( stdout );
    int *ve;
    vedaHMemPtr(&ve, p);

    int i;
    for ( i = 0; i < n; i++ ) {
       if ( ve[i] != v ) break;
    }

    return i < n ? ~0ULL : 0ULL;
}
