#include <veda_device.h>
#include <cstdio>
#include <omp.h>
#include <thread>
#include <functional>

#define CHECK(err) if(err != VEDA_SUCCESS) {\
		const char* str = 0;\
		vedaGetErrorName(err, &str);\
		printf("%s @ %s (%i)\n", str, __FILE__, __LINE__);\
	}

// -----------------------------------------------------------------------------
// Basic Tests
// -----------------------------------------------------------------------------
extern "C" uint64_t ve_test(int* vptr, VEDAdeviceptr newPtr, const size_t cnt) {
	int* out;
	CHECK(vedaMemAllocPtr((void**)&out, newPtr, cnt * sizeof(int)));

	#pragma _NEC ivdep
	for(size_t i = 0; i < cnt; i++)
		out[i] = cnt - 1 - i;

	return 0x0123456789ABCDEFllu;
}

struct complex {
	float x, y;
};

uint64_t ve_test_cpp(int* vptr, VEDAdeviceptr newPtr, const size_t cnt, complex x) {
	int* out;
	CHECK(vedaMemAllocPtr((void**)&out, newPtr, cnt * sizeof(int)));

	#pragma _NEC ivdep
	for(size_t i = 0; i < cnt; i++)
		out[i] = cnt - 1 - i;

	return 0x0123456789ABCDEFllu;
}

template<typename T>
T ve_test_tmpl(T x, int* y, double z) {
	printf("%f, %p, %f\n", x, y, z);
	return x + 1;
}
template float ve_test_tmpl<float>(float, int*, double);

extern "C" void ve_hello_world(int stream) {
	#pragma omp parallel
	{
    	size_t hash = std::hash<std::thread::id>{}(std::this_thread::get_id());
		printf("Stream %i: Omp: %i/%i Thread: %016llX\n", stream, omp_get_thread_num(), omp_get_num_threads(), hash);
	}
	printf("Stream %i DONE!\n", stream);
}

extern "C" int ve_hello_world_fault(int stream) {
	return -1;
}

// -----------------------------------------------------------------------------
// Memset Tests
// -----------------------------------------------------------------------------
struct uint128_t {
	uint64_t x;
	uint64_t y;

	inline bool operator!=(const uint128_t& o) const {
		return x != o.x || y != o.y;
	}

	// not really correct!
	inline operator int64_t(void) const {
		return x;
	}
};

template<typename T>
static inline void ve_test_memset(VEDAdeviceptr _ptr, const T value, const size_t cnt) {
	auto ptr = VEDAptr<T>(_ptr).ptr();
	for(size_t i = 0; i < cnt; i++) {
		auto val = ptr[i];
		if(val != value) {
			printf("FAILED vedaMemsetD%i, expected %llX but found %llX in [%llu/%llu]\n", sizeof(T) * 8, (int64_t)value, (int64_t)val, i, cnt);
			return;
		}
	}
}

extern "C" void ve_test_memset_d8	(VEDAdeviceptr ptr, const uint8_t  value, const size_t cnt) {	ve_test_memset(ptr, value, cnt);	}
extern "C" void ve_test_memset_d16	(VEDAdeviceptr ptr, const uint16_t value, const size_t cnt) {	ve_test_memset(ptr, value, cnt);	}
extern "C" void ve_test_memset_d32	(VEDAdeviceptr ptr, const uint32_t value, const size_t cnt) {	ve_test_memset(ptr, value, cnt);	}
extern "C" void ve_test_memset_d64	(VEDAdeviceptr ptr, const uint64_t value, const size_t cnt) {	ve_test_memset(ptr, value, cnt);	}
extern "C" void ve_test_memset_d128	(VEDAdeviceptr ptr, const uint64_t x, const uint64_t y, const size_t cnt) {
	uint128_t value = {x, y};
	ve_test_memset(ptr, value, cnt);
}

// -----------------------------------------------------------------------------
// Template Tests
// -----------------------------------------------------------------------------
struct A {};

template<int X>
struct B{};

template<typename X>
struct C{};

namespace bla {
	template<typename T>
	struct complex {
		T x, y;
	};
}

#include "tmpl.h"
namespace ns {
	namespace veda {
		#include "tmpl.h"
	}
}
